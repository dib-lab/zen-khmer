{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import sys\n",
    "sys.path.insert(0, '/Users/t/dev/khmer')\n",
    "\n",
    "import khmer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introduction\n",
    "\n",
    "khmer is a toolkit for fast, low-memory examination of k-mers and De\n",
    "Bruijn graphs, as well as manipulation of shotgun sequencing reads.\n",
    "\n",
    "khmer started with one simple idea: memory efficient storage of k-mers\n",
    "is useful.  But, because De Bruijn graphs are based on k-mers, and\n",
    "De Bruijn graphs are one simply and unifying way to look at lots of\n",
    "DNA sequencing data, khmer has grown in utility.\n",
    "\n",
    "## DNA, k-mers, and graphs\n",
    "\n",
    "Imagine a strand of DNA whose sequence has no repeats at a given k-mer\n",
    "size - that is, for a specific k-mer size (say $k_0 = 21$), each k-mer\n",
    "that is present in the strand of DNA occurs exactly once.\n",
    "\n",
    "If you decrease k from k_0 enough, you will eventually find a repeated\n",
    "k-mer (consider a k of 1).  If you increase k beyond k_0, you will\n",
    "never find a repeated k-mer.\n",
    "\n",
    "You can build an explicit graph from the k-mers in the sequence by\n",
    "constructing nodes from the k-mers and edges between the nodes as\n",
    "k-1 overlaps; this graph can also be built with overlaps as nodes\n",
    "and k-mers as edges.\n",
    "\n",
    "(picture)\n",
    "\n",
    "You can also build an *implicit* graph from the k-mers by simply\n",
    "recording all of the k-mers, and then dynamically finding all possible\n",
    "neighboring nodes by searching for all k-1 overlaps; for a DNA De\n",
    "Bruijn graph, there are never more than 4 possible prefixes and 4\n",
    "possible suffixes.  For long enough k, there will be no false\n",
    "edges.\n",
    "\n",
    "The advantage of the implicit graph is that tracking the edges requires\n",
    "memory, while merely tracking the nodes can be done with minimal expense.\n",
    "\n",
    "(Mention sparseness and k in context of initial paper.)\n",
    "\n",
    "(Discuss distributed, and what \"expensive\" means.)\n",
    "\n",
    "(Connect to Medjedev paper, and Rizk paper.)\n",
    "\n",
    "The core utility of the De Bruijn graph approach to representing\n",
    "sequence data is that all of the *real* paths present in the raw data\n",
    "will be paths in the De Bruijn graph, and that these paths can\n",
    "generally be distinguished from paths created by sequencing errors in\n",
    "the sequencing data.  We will discuss this below.\n",
    "\n",
    "### Sequencing errors, k-mer inflation, and the error catastrophe\n",
    "\n",
    "(solid k-mers, pevzner.)\n",
    "\n",
    "(weakness in DBG, indels.)\n",
    "\n",
    "## How khmer works underneath\n",
    "\n",
    "khmer works by storing k-mers, optionally with abundances, in a a\n",
    "[Bloom filter](https://en.wikipedia.org/wiki/Bloom_filter) or\n",
    "[CountMin sketch](https://en.wikipedia.org/wiki/Count%E2%80%93min_sketch)\n",
    "memory efficient, and fairly fast data structures.\n",
    "\n",
    "The details are explored in @citepell and @citeqingpeng, but the\n",
    "basic idea is to use a hash table to store presence/absence or abundance\n",
    "information without paying attention to collisions.  (@@discuss false positive rate)\n",
    "\n",
    "These data structures are:\n",
    "\n",
    "* simple - the core ideas of khmer can be reimplemented in under a few dozens\n",
    "  lines of simple code.\n",
    "\n",
    "* fast - most queries involve hashing a few numbers and doing a direct lookup\n",
    "  into a large table for each hash.\n",
    "\n",
    "* memory-efficient: for sparse data sets (where most k-mers are not present),\n",
    "  these data structures turn out to be incredibly efficient.\n",
    "\n",
    "* constant memory: you must allocate the data structures entirely at the\n",
    "  beginning.\n",
    "\n",
    "* online: you can query for the presence/absence and abundance of k-mers at\n",
    "  any point.\n",
    "\n",
    "In exchange we give up a few things:\n",
    "\n",
    "* elements cannot be directly removed from Bloom filters.\n",
    "\n",
    "* elements are also anonymous and must be accessed with a handle (that is,\n",
    "  you must know what k-mer you are looking for; you can't retrieve all\n",
    "  stored k-mers).\n",
    "\n",
    "and probably a few other items I'm missing here...\n",
    "\n",
    "There are a number of approaches we could take to ameliorate the\n",
    "problems, but we have been able to work around the problems so far.\n",
    "\n",
    "Essentially, the tradeoff is a few cheap/easy operations against loss\n",
    "of generality in the data structure.  But, because of the growth of\n",
    "data and the error catastrophe in De Bruijn graphs, discussed above,\n",
    "low memory data structures and fast operations have been practically useful\n",
    "and interesting for real-world data analysis problems.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A hands-on exploration\n",
    "\n",
    "khmer is written in C++ with a Python wrapping; while the underlying\n",
    "C++ code is directly usable, it's not very mature.  This is because\n",
    "within our group we almost entirely use the Python API.  This is what\n",
    "the command-line scripts and all the tests also use.\n",
    "\n",
    "Below, we explore some of the basic concepts in khmer.\n",
    "\n",
    "### Basic k-mer storage: `Nodegraph` and `Countgraph`\n",
    "\n",
    "To store a k-mer, you first create a Nodegraph or a Countgraph,\n",
    "and give it a k-mer size and some other parameters (discussed below).\n",
    "\n",
    "Let's start with a k-mer size of 7:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    ">>> K = 7\n",
    ">>> kmer = 'ATGGATG'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A Nodegraph stores the presence or absence of k-mers, without keeping\n",
    "track of their count:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    ">>> ng = khmer.Nodegraph(K, 1e6, 4)\n",
    ">>> ng.get(kmer)\n",
    "0\n",
    ">>> ng.add(kmer)\n",
    ">>> ng.get(kmer)\n",
    "1\n",
    ">>> ng.add(kmer)\n",
    ">>> ng.get(kmer)\n",
    "1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A Countgraph stores the count of k-mers, up to 255 (8 bits)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    ">>> cg = khmer.Countgraph(K, 1e6, 4)\n",
    ">>> cg.get(kmer)\n",
    "0\n",
    ">>> cg.add(kmer)\n",
    ">>> cg.get(kmer)\n",
    "1\n",
    ">>> cg.add(kmer)\n",
    ">>> cg.get(kmer)\n",
    "2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In either case, we can ask for all of the neighboring nodes in the graph,\n",
    "which, in this case, will be none --"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    ">>> cg.neighbors(kmer)\n",
    "[]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we add an adjoining k-mer, though --"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[5555]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    ">>> cg.add(kmer[1:] + 'G')\n",
    ">>> cg.neighbors(kmer)\n",
    "[5555]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "we'll get back a neighbor.  Here, the neighbor is represented numerically;\n",
    "you can get the neighbor back as a string with the ``reverse_hash`` method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'TGGATGG'"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    ">>> ns = cg.neighbors(kmer)\n",
    ">>> cg.reverse_hash(ns[0])\n",
    "'TGGATGG'\n",
    "\n",
    "# @CTB note that forward and reverse are collapsed"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Where's the graph, then?\n",
    "\n",
    "This simple concept of \"storing k-mers\" can be used to do a bunch of\n",
    "useful things - for example, assembly.\n",
    "\n",
    "Let's start with a larger K, to avoid repeats --"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    ">>> K = 21\n",
    ">>> ng = khmer.Nodegraph(K, 1e6, 4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "@@traverse?\n",
    "\n",
    "Now, suppose we have a sequence longer than K:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    ">>> seq = 'CCCTGTTAGCTACGTCCGTCTAAGGATATTAACATAGTTGCGACTGCGTCCTGTGCTCA'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can add it to the graph with ``consume`` (which returns the number of k-mers consumed):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "39"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    ">>> ng.consume(seq)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and we can now traverse it from one end to the other like so:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'TGAGCACAGGACGCAGTCGCAACTATGTTAATATCCTTAGACGGACGTAGCTAACAGGG'"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    ">>> start_kmer = seq[:K]\n",
    ">>> ng.assemble_linear_path(start_kmer)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "That, in a nutshell, is what assemblers do."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Revisiting a few pecularities\n",
    "\n",
    "Because of the memory-efficient way that khmer stores k-mers, the\n",
    "Nodegraph and Countgraph structures don't actually keep track of the\n",
    "actual k-mer; this means you can't ask the data structures for a list\n",
    "of the k-mers they contain.  So you always have to know what k-mer\n",
    "you're asking about.  In practice, this means you need a starting\n",
    "point.\n",
    "\n",
    "Extracting the error rate.\n",
    "The error rate really doesn't matter in the context of real data.\n",
    "\n",
    "Allocating memory up front.\n",
    "\n",
    "Next: [Manipulating k-mer abundance histograms](manipulating-histograms)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
